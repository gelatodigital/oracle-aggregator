{
  "address": "0x399cFce1F3f5AB74C46d9F0361BE18f87c23FCC3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_inTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_outTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_decimals",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_decimals",
          "type": "uint256[]"
        }
      ],
      "name": "addStablecoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_inTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_outTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        }
      ],
      "name": "addTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outToken",
          "type": "address"
        }
      ],
      "name": "getExpectedReturnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outTokenDecimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe48ac0d07516b79aedee73bdceb0c6c4b16703ab6bf96ac3502414fb2ff6562b",
  "receipt": {
    "to": null,
    "from": "0x4B5BaD436CcA8df3bD39A095b84991fAc9A226F1",
    "contractAddress": "0x399cFce1F3f5AB74C46d9F0361BE18f87c23FCC3",
    "transactionIndex": 1,
    "gasUsed": "1751057",
    "logsBloom": "0x
    "blockHash": "0x3da3340b950d2c32fdc8453f9ea1c4b7694a12745876f6f045943735643536d6",
    "transactionHash": "0xe48ac0d07516b79aedee73bdceb0c6c4b16703ab6bf96ac3502414fb2ff6562b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7911220,
        "transactionHash": "0xe48ac0d07516b79aedee73bdceb0c6c4b16703ab6bf96ac3502414fb2ff6562b",
        "address": "0x399cFce1F3f5AB74C46d9F0361BE18f87c23FCC3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b5bad436cca8df3bd39a095b84991fac9a226f1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3da3340b950d2c32fdc8453f9ea1c4b7694a12745876f6f045943735643536d6"
      }
    ],
    "blockNumber": 7911220,
    "cumulativeGasUsed": "4050107",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    [
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
      "0xbF7A7169562078c96f0eC1A8aFD6aE50f12e5A99",
      "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
      "0x6e894660985207feb7cf89Faf048998c71E8EE89",
      "0xcBBb17D9767bD57FBF4Bbf8842E916bCb3826ec1",
      "0xddea378A6dDC8AfeC82C36E9b0078826bf9e68B6"
    ],
    [
      "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3"
    ],
    [
      "0xdCA36F27cbC4E38aE16C4E9f99D39b42337F6dcf",
      "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e",
      "0x031dB56e01f82f20803059331DC6bEe9b17F7fC9",
      "0xd8bD0a1cB028a31AA859A21A3758685a95dE4623",
      "0x9331b55D9830EF609A2aBCfAc0FBCE050A52fdEa",
      "0xE96C4407597CD507002dF88ff6E0008AB41266Ee",
      "0xF7Bbe4D7d13d600127B6Aa132f1dCea301e9c8Fc"
    ],
    [
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b",
      "0x5592EC0cfb4dbc12D3aB100b257153436a1f0FEa"
    ],
    [
      8,
      6,
      18
    ]
  ],
  "solcInputHash": "cd878bc428a5d60a0d1c1abbc2f8be42",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_inTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_outTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"}],\"name\":\"addStablecoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_inTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_outTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"}],\"name\":\"getExpectedReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outTokenDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"getExpectedReturnAmount(uint256,address,address)\":{\"details\":\"expected return amount of outToken from amountIn of inToken\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/OracleAggregator.sol\":\"OracleAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/external/Ownable.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xbd17809400b98353ba6de08b9529d3213cd008eebc059728b0538bbd409f64a1\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/external/SafeMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x6c5c35e292963cbfd8d30c28a9f0d32ab062c89fc49056fc0b0d19de404f3601\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/OracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.10;\\n\\nimport {Ownable} from \\\"@gelatonetwork/core/contracts/external/Ownable.sol\\\";\\nimport {SafeMath} from \\\"@gelatonetwork/core/contracts/external/SafeMath.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\n\\n// solhint-disable max-states-count\\ncontract OracleAggregator is Ownable {\\n    using SafeMath for uint256;\\n\\n    // solhint-disable var-name-mixedcase\\n    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // solhint-disable var-name-mixedcase\\n    address private constant USD = 0x7354C81fbCb229187480c4f497F945C6A312d5C3;\\n\\n    address public immutable WETH;\\n\\n    mapping(address => mapping(address => address)) private _tokenPairAddress;\\n    mapping(address => uint256) private _nrOfDecimalsUSD;\\n\\n    // solhint-disable function-max-lines\\n    constructor(\\n        address _weth,\\n        address[] memory _inTokens,\\n        address[] memory _outTokens,\\n        address[] memory _oracles,\\n        address[] memory _stablecoins,\\n        uint256[] memory _decimals\\n    ) public {\\n        WETH = _weth;\\n        addTokens(_inTokens, _outTokens, _oracles);\\n        addStablecoins(_stablecoins, _decimals);\\n        // required token pairs\\n        require(_tokenPairAddress[ETH][USD] != address(0));\\n        require(_tokenPairAddress[USD][ETH] != address(0));\\n    }\\n\\n    function addTokens(\\n        address[] memory _inTokens,\\n        address[] memory _outTokens,\\n        address[] memory _oracles\\n    ) public onlyOwner {\\n        require(\\n            _inTokens.length == _outTokens.length &&\\n                _inTokens.length == _oracles.length\\n        );\\n        for (uint256 i = 0; i < _inTokens.length; i++) {\\n            _tokenPairAddress[_inTokens[i]][_outTokens[i]] = _oracles[i];\\n        }\\n    }\\n\\n    function addStablecoins(\\n        address[] memory _stablecoins,\\n        uint256[] memory _decimals\\n    ) public onlyOwner {\\n        require(_stablecoins.length == _decimals.length);\\n        for (uint256 i = 0; i < _stablecoins.length; i++) {\\n            _nrOfDecimalsUSD[_stablecoins[i]] = _decimals[i];\\n        }\\n    }\\n\\n    // solhint-disable function-max-lines\\n    // solhint-disable code-complexity\\n    /// @dev expected return amount of outToken from amountIn of inToken\\n    function getExpectedReturnAmount(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken\\n    ) public view returns (uint256 returnAmount, uint256 outTokenDecimals) {\\n        // sanity checks\\n        require(amountIn > 0, \\\"OracleAggregator: amountIn is Zero\\\");\\n        require(inToken != address(0), \\\"OracleAggregator: inToken is Zero\\\");\\n        require(outToken != address(0), \\\"OracleAggregator: outToken is Zero\\\");\\n\\n        // convert WETH to ETH\\n        if (inToken == WETH) {\\n            inToken = ETH;\\n        }\\n        if (outToken == WETH) {\\n            outToken = ETH;\\n        }\\n\\n        // decimals of inToken\\n        uint256 inTokenDecimals;\\n        (inTokenDecimals, outTokenDecimals) = _getDecimals(inToken, outToken);\\n\\n        // store outToken address if it is a stablecoin\\n        address stableCoinAddress =\\n            _nrOfDecimalsUSD[outToken] > 0 ? outToken : address(0);\\n\\n        // convert any stablecoin addresses to USD address\\n        (inToken, outToken) = _convertUSD(inToken, outToken);\\n\\n        if (outToken == ETH || outToken == USD) {\\n            // when outToken is ETH or USD\\n            returnAmount = _handleConvertToEthOrUsd(\\n                amountIn,\\n                inToken,\\n                outToken,\\n                inTokenDecimals,\\n                stableCoinAddress\\n            );\\n        } else {\\n            // when outToken is not ETH or USD\\n            returnAmount = _handleConvertToToken(\\n                amountIn,\\n                inToken,\\n                outToken,\\n                inTokenDecimals\\n            );\\n        }\\n\\n        return (returnAmount, outTokenDecimals);\\n    }\\n\\n    function _handleConvertToEthOrUsd(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken,\\n        uint256 inTokenDecimals,\\n        address stableCoinAddress\\n    ) private view returns (uint256 returnAmount) {\\n        // oracle of inToken vs outToken exists\\n        // e.g. calculating KNC/ETH\\n        // and KNC/ETH oracle exists\\n        if (_tokenPairAddress[inToken][outToken] != address(0)) {\\n            (uint256 price, uint256 nrOfDecimals) = _getRate(inToken, outToken);\\n            returnAmount = stableCoinAddress != address(0)\\n                ? _matchStableCoinDecimal(\\n                    stableCoinAddress,\\n                    amountIn,\\n                    nrOfDecimals,\\n                    0,\\n                    price,\\n                    1\\n                )\\n                : amountIn.mul(price);\\n\\n            return returnAmount.div(10**inTokenDecimals);\\n        } else {\\n            // direct oracle of inToken vs outToken does not exist\\n            // e.g. calculating UNI/USD\\n            // UNI/ETH and USD/ETH oracles available\\n            (address pairA, address pairB) =\\n                _checkAvailablePair(inToken, outToken);\\n            if (pairA == address(0) && pairB == address(0)) return (0);\\n            (uint256 priceA, ) = _getRate(inToken, pairA);\\n            (uint256 priceB, uint256 nrOfDecimals) = _getRate(outToken, pairB);\\n\\n            nrOfDecimals = stableCoinAddress != address(0)\\n                ? _nrOfDecimalsUSD[stableCoinAddress]\\n                : nrOfDecimals;\\n\\n            returnAmount = amountIn.mul(priceA.mul(10**nrOfDecimals)).div(\\n                priceB\\n            );\\n            if (outToken != ETH) {\\n                return returnAmount.div(10**inTokenDecimals);\\n            } else {\\n                return returnAmount.div(10**_nrOfDecimalsUSD[USD]);\\n            }\\n        }\\n    }\\n\\n    function _handleConvertToToken(\\n        uint256 amountIn,\\n        address inToken,\\n        address outToken,\\n        uint256 inTokenDecimals\\n    ) private view returns (uint256 returnAmount) {\\n        (address pairA, address pairB) = _checkAvailablePair(inToken, outToken);\\n        if (pairA == address(0) && pairB == address(0)) return (0);\\n        // oracle of inToken/ETH, outToken/ETH || inToken/USD, outToken/USD exists\\n        // e.g. calculating KNC/UNI where\\n        // KNC/ETH and UNI/ETH oracles available\\n        if (pairA == pairB) {\\n            (uint256 priceA, uint256 nrOfDecimals) = _getRate(inToken, pairA);\\n\\n            (uint256 priceB, ) = _getRate(outToken, pairB);\\n\\n            returnAmount = amountIn.mul(priceA.mul(10**nrOfDecimals)).div(\\n                priceB\\n            );\\n            if (pairA == ETH) {\\n                return returnAmount.div(10**inTokenDecimals);\\n            } else {\\n                return returnAmount.div(10**_nrOfDecimalsUSD[USD]);\\n            }\\n        } else if (pairA == ETH && pairB == USD) {\\n            // oracle of inToken/ETH and outToken/USD exists\\n            // e.g. calculating UNI/SXP where\\n            // UNI/ETH and SXP/USD oracles available\\n            (uint256 priceA, ) = _getRate(inToken, pairA);\\n            (uint256 priceETHUSD, ) = _getRate(ETH, USD);\\n            (uint256 priceB, ) = _getRate(outToken, pairB);\\n\\n            returnAmount = amountIn.mul(priceA.mul(priceETHUSD)).div(priceB);\\n            return returnAmount.div(10**inTokenDecimals);\\n        } else if (pairA == USD && pairB == ETH) {\\n            // oracle of inToken/USD and outToken/ETH exists\\n            // e.g. calculating SXP/UNI where\\n            // SXP/USD and UNI/ETH oracles available\\n            uint256 numerator;\\n            {\\n                (uint256 priceA, uint256 nrOfDecimals) =\\n                    _getRate(inToken, pairA);\\n\\n                (uint256 priceUSDETH, uint256 nrOfDecimalsUSDETH) =\\n                    _getRate(USD, ETH);\\n\\n                numerator = priceUSDETH\\n                    .mul(10**(nrOfDecimalsUSDETH.sub(nrOfDecimals)))\\n                    .mul(priceA)\\n                    .div(10**nrOfDecimalsUSDETH);\\n            }\\n            (uint256 priceB, ) = _getRate(outToken, pairB);\\n            returnAmount = amountIn.mul(numerator).div(priceB);\\n            return returnAmount;\\n        }\\n    }\\n\\n    /// @dev check the available oracles for token a & b\\n    /// and choose which oracles to use\\n    function _checkAvailablePair(address inToken, address outToken)\\n        private\\n        view\\n        returns (address, address)\\n    {\\n        if (\\n            _tokenPairAddress[inToken][USD] != address(0) &&\\n            _tokenPairAddress[outToken][USD] != address(0)\\n        ) {\\n            return (USD, USD);\\n        } else if (\\n            _tokenPairAddress[inToken][ETH] != address(0) &&\\n            _tokenPairAddress[outToken][ETH] != address(0)\\n        ) {\\n            return (ETH, ETH);\\n        } else if (\\n            _tokenPairAddress[inToken][ETH] != address(0) &&\\n            _tokenPairAddress[outToken][USD] != address(0)\\n        ) {\\n            return (ETH, USD);\\n        } else if (\\n            _tokenPairAddress[inToken][USD] != address(0) &&\\n            _tokenPairAddress[outToken][ETH] != address(0)\\n        ) {\\n            return (USD, ETH);\\n        } else {\\n            return (address(0), address(0));\\n        }\\n    }\\n\\n    function _getDecimals(address inToken, address _outToken)\\n        private\\n        view\\n        returns (uint256 inTokenDecimals, uint256 outTokenDecimals)\\n    {\\n        // decimals of inToken\\n        if (inToken != ETH && inToken != USD) {\\n            try ERC20(inToken).decimals() returns (uint8 _inputDecimals) {\\n                inTokenDecimals = uint256(_inputDecimals);\\n            } catch {\\n                revert(\\\"OracleAggregator: ERC20.decimals() revert\\\");\\n            }\\n        } else {\\n            if (inToken != ETH) {\\n                inTokenDecimals = _nrOfDecimalsUSD[USD];\\n            } else {\\n                inTokenDecimals = 18;\\n            }\\n        }\\n\\n        // decimals of outToken\\n        if (_outToken != ETH && _outToken != USD) {\\n            try ERC20(_outToken).decimals() returns (uint8 _outputDecimals) {\\n                outTokenDecimals = uint256(_outputDecimals);\\n            } catch {\\n                revert(\\\"OracleAggregator: ERC20.decimals() revert\\\");\\n            }\\n        } else {\\n            if (_outToken != ETH) {\\n                outTokenDecimals = _nrOfDecimalsUSD[USD];\\n            } else {\\n                outTokenDecimals = 18;\\n            }\\n        }\\n    }\\n\\n    function _getRate(address inToken, address outToken)\\n        private\\n        view\\n        returns (uint256 tokenPrice, uint256 nrOfDecimals)\\n    {\\n        if (inToken == outToken) {\\n            return (1, 0);\\n        } else {\\n            IOracle priceFeed = IOracle(_tokenPairAddress[inToken][outToken]);\\n            tokenPrice = uint256(priceFeed.latestAnswer());\\n            nrOfDecimals = priceFeed.decimals();\\n        }\\n    }\\n\\n    /// @dev converting all usd pegged stablecoins to single USD address\\n    function _convertUSD(address inToken, address outToken)\\n        private\\n        view\\n        returns (address, address)\\n    {\\n        if (_nrOfDecimalsUSD[inToken] > 0 && _nrOfDecimalsUSD[outToken] > 0) {\\n            return (USD, USD);\\n        } else if (_nrOfDecimalsUSD[inToken] > 0) {\\n            return (USD, outToken);\\n        } else if (_nrOfDecimalsUSD[outToken] > 0) {\\n            return (inToken, USD);\\n        } else {\\n            return (inToken, outToken);\\n        }\\n    }\\n\\n    /// @dev modify nrOfDecimlas and amount to follow stableCoin's nrOfDecimals\\n    function _matchStableCoinDecimal(\\n        address stableCoinAddress,\\n        uint256 amount,\\n        uint256 nrOfDecimals,\\n        uint256 padding,\\n        uint256 returnRateA,\\n        uint256 returnRateB\\n    ) private view returns (uint256 returnAmount) {\\n        uint256 div =\\n            _nrOfDecimalsUSD[stableCoinAddress] > nrOfDecimals\\n                ? 10**(_nrOfDecimalsUSD[stableCoinAddress].sub(nrOfDecimals))\\n                : 10**(nrOfDecimals.sub(_nrOfDecimalsUSD[stableCoinAddress]));\\n        returnAmount = _nrOfDecimalsUSD[stableCoinAddress] > nrOfDecimals\\n            ? amount.mul(returnRateA.mul(10**padding)).div(returnRateB).mul(div)\\n            : amount.mul(returnRateA.mul(10**padding)).div(returnRateB).div(\\n                div\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc819037ffe286729b57598a81c45cf07a08ce944aedff9c7aa1b200559977f87\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface IOracle {\\n    function latestAnswer() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf2bbf4148dde5485a3e458544f04bd75731962d3ba68ede3f66cf21603675de\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146103ac5780638f32d59b146103d0578063ad5c4648146103ec578063f2fde38b146103f457610088565b80631ef033781461008d5780632711f37f146102345780633c772b6c14610357578063715018a6146103a4575b600080fd5b610232600480360360608110156100a357600080fd5b810190602081018135600160201b8111156100bd57600080fd5b8201836020820111156100cf57600080fd5b803590602001918460208302840111600160201b831117156100f057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561013f57600080fd5b82018360208201111561015157600080fd5b803590602001918460208302840111600160201b8311171561017257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101c157600080fd5b8201836020820111156101d357600080fd5b803590602001918460208302840111600160201b831117156101f457600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061041a945050505050565b005b6102326004803603604081101561024a57600080fd5b810190602081018135600160201b81111561026457600080fd5b82018360208201111561027657600080fd5b803590602001918460208302840111600160201b8311171561029757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102e657600080fd5b8201836020820111156102f857600080fd5b803590602001918460208302840111600160201b8311171561031957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061052c945050505050565b61038b6004803603606081101561036d57600080fd5b508035906001600160a01b03602082013581169160400135166105e2565b6040805192835260208301919091528051918290030190f35b6102326107fc565b6103b461088d565b604080516001600160a01b039092168252519081900360200190f35b6103d861089c565b604080519115158252519081900360200190f35b6103b46108ad565b6102326004803603602081101561040a57600080fd5b50356001600160a01b03166108d1565b61042261089c565b610461576040805162461bcd60e51b81526020600482018190526024820152600080516020611902833981519152604482015290519081900360640190fd5b81518351148015610473575080518351145b61047c57600080fd5b60005b83518110156105265781818151811061049457fe5b6020026020010151600160008684815181106104ac57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008584815181106104e257fe5b6020908102919091018101516001600160a01b0390811683529082019290925260400160002080546001600160a01b0319169290911691909117905560010161047f565b50505050565b61053461089c565b610573576040805162461bcd60e51b81526020600482018190526024820152600080516020611902833981519152604482015290519081900360640190fd5b805182511461058157600080fd5b60005b82518110156105dd5781818151811061059957fe5b6020026020010151600260008584815181106105b157fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002055600101610584565b505050565b600080600085116106245760405162461bcd60e51b815260040180806020018281038252602281526020018061187f6022913960400191505060405180910390fd5b6001600160a01b0384166106695760405162461bcd60e51b81526004018080602001828103825260218152602001806119426021913960400191505060405180910390fd5b6001600160a01b0383166106ae5760405162461bcd60e51b81526004018080602001828103825260228152602001806118376022913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614156106fa576000805160206118e283398151915293505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610746576000805160206118e283398151915292505b60006107528585610924565b6001600160a01b03861660009081526002602052604081205491945091925061077c57600061077e565b845b905061078a8686610b9a565b90965094506001600160a01b0385166000805160206118e283398151915214806107ca57506001600160a01b038516600080516020611922833981519152145b156107e3576107dc8787878585610c6d565b93506107f2565b6107ef87878785610e49565b93505b5050935093915050565b61080461089c565b610843576040805162461bcd60e51b81526020600482018190526024820152600080516020611902833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108d961089c565b610918576040805162461bcd60e51b81526020600482018190526024820152600080516020611902833981519152604482015290519081900360640190fd5b6109218161111d565b50565b6000806001600160a01b0384166000805160206118e28339815191521480159061096557506001600160a01b03841660008051602061192283398151915214155b15610a0d57836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a357600080fd5b505afa9250505080156109c857506040513d60208110156109c357600080fd5b505160015b610a035760405162461bcd60e51b81526004018080602001828103825260298152602001806119636029913960400191505060405180910390fd5b60ff169150610a5e565b6001600160a01b0384166000805160206118e283398151915214610a595760008051602061192283398151915260005260026020526000805160206118a1833981519152549150610a5e565b601291505b6001600160a01b0383166000805160206118e283398151915214801590610a9c57506001600160a01b03831660008051602061192283398151915214155b15610b4457826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ada57600080fd5b505afa925050508015610aff57506040513d6020811015610afa57600080fd5b505160015b610b3a5760405162461bcd60e51b81526004018080602001828103825260298152602001806119636029913960400191505060405180910390fd5b60ff169050610b93565b6001600160a01b0383166000805160206118e283398151915214610b8f575060008051602061192283398151915260005260026020526000805160206118a183398151915254610b93565b5060125b9250929050565b6001600160a01b038216600090815260026020526040812054819015801590610bda57506001600160a01b03831660009081526002602052604090205415155b15610bf75750600080516020611922833981519152905080610b93565b6001600160a01b03841660009081526002602052604090205415610c2d5750600080516020611922833981519152905081610b93565b6001600160a01b03831660009081526002602052604090205415610c635750829050600080516020611922833981519152610b93565b5082905081610b93565b6001600160a01b038481166000908152600160209081526040808320878516845290915281205490911615610d0057600080610ca987876111bd565b90925090506001600160a01b038416610cd157610ccc888363ffffffff6112e916565b610ce1565b610ce1848983600086600161134b565b9250610cf783600a87900a63ffffffff61144716565b92505050610e40565b600080610d0d8787611489565b90925090506001600160a01b038216158015610d3057506001600160a01b038116155b15610d4057600092505050610e40565b6000610d4c88846111bd565b509050600080610d5c89856111bd565b90925090506001600160a01b038716610d755780610d8f565b6001600160a01b0387166000908152600260205260409020545b9050610dc582610db9610dac86600a86900a63ffffffff6112e916565b8e9063ffffffff6112e916565b9063ffffffff61144716565b95506001600160a01b0389166000805160206118e283398151915214610e0557610df986600a8a900a63ffffffff61144716565b95505050505050610e40565b60008051602061192283398151915260005260026020526000805160206118a183398151915254610df9908790600a0a63ffffffff61144716565b95945050505050565b6000806000610e588686611489565b90925090506001600160a01b038216158015610e7b57506001600160a01b038116155b15610e8b57600092505050611115565b806001600160a01b0316826001600160a01b03161415610f6957600080610eb288856111bd565b915091506000610ec288856111bd565b509050610eed81610db9610ee086600a87900a63ffffffff6112e916565b8d9063ffffffff6112e916565b95506001600160a01b0385166000805160206118e28339815191521415610f2e57610f2286600a89900a63ffffffff61144716565b95505050505050611115565b60008051602061192283398151915260005260026020526000805160206118a183398151915254610f22908790600a0a63ffffffff61144716565b6001600160a01b0382166000805160206118e2833981519152148015610fa557506001600160a01b038116600080516020611922833981519152145b15611020576000610fb687846111bd565b5090506000610fe16000805160206118e28339815191526000805160206119228339815191526111bd565b5090506000610ff088856111bd565b50905061100a81610db9610ee0868663ffffffff6112e916565b9550610f2286600a89900a63ffffffff61144716565b6001600160a01b03821660008051602061192283398151915214801561105c57506001600160a01b0381166000805160206118e2833981519152145b1561111257600080600061107089866111bd565b9150915060008061109d6000805160206119228339815191526000805160206118e28339815191526111bd565b90925090506110dd600a82900a610db9866110d16110c1868963ffffffff6116f816565b8790600a0a63ffffffff6112e916565b9063ffffffff6112e916565b94505050505060006110ef87846111bd565b50905061110681610db98b8563ffffffff6112e916565b94506111159350505050565b50505b949350505050565b6001600160a01b0381166111625760405162461bcd60e51b81526004018080602001828103825260268152602001806118596026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080826001600160a01b0316846001600160a01b031614156111e65750600190506000610b93565b6001600160a01b03808516600090815260016020908152604080832087851684528252918290205482516350d25bcd60e01b8152925193169283926350d25bcd926004808301939192829003018186803b15801561124357600080fd5b505afa158015611257573d6000803e3d6000fd5b505050506040513d602081101561126d57600080fd5b50516040805163313ce56760e01b815290519194506001600160a01b0383169163313ce56791600480820192602092909190829003018186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d60208110156112dd57600080fd5b50519150509250929050565b6000826112f857506000611345565b8282028284828161130557fe5b04146113425760405162461bcd60e51b81526004018080602001828103825260218152602001806118c16021913960400191505060405180910390fd5b90505b92915050565b6001600160a01b0386166000908152600260205260408120548190861061139e576001600160a01b03881660009081526002602052604090205461139690879063ffffffff6116f816565b600a0a6113cb565b6001600160a01b0388166000908152600260205260409020546113c7908763ffffffff6116f816565b600a0a5b6001600160a01b038916600090815260026020526040902054909150861061141c5761141781610db9858161140a89600a8c900a63ffffffff6112e916565b8c9063ffffffff6112e916565b61143b565b61143b816110d185610db961140a89600a8c900a63ffffffff6112e916565b98975050505050505050565b600061134283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061173a565b6001600160a01b038281166000908152600160209081526040808320600080516020611922833981519152845290915281205490918291161580159061150157506001600160a01b03838116600090815260016020908152604080832060008051602061192283398151915284529091529020541615155b1561151e5750600080516020611922833981519152905080610b93565b6001600160a01b0384811660009081526001602090815260408083206000805160206118e28339815191528452909152902054161580159061159257506001600160a01b0383811660009081526001602090815260408083206000805160206118e283398151915284529091529020541615155b156115af57506000805160206118e2833981519152905080610b93565b6001600160a01b0384811660009081526001602090815260408083206000805160206118e28339815191528452909152902054161580159061162357506001600160a01b03838116600090815260016020908152604080832060008051602061192283398151915284529091529020541615155b1561164e57506000805160206118e28339815191529050600080516020611922833981519152610b93565b6001600160a01b038481166000908152600160209081526040808320600080516020611922833981519152845290915290205416158015906116c257506001600160a01b0383811660009081526001602090815260408083206000805160206118e283398151915284529091529020541615155b156116ed575060008051602061192283398151915290506000805160206118e2833981519152610b93565b506000905080610b93565b600061134283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506117dc565b600081836117c65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561178b578181015183820152602001611773565b50505050905090810190601f1680156117b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816117d257fe5b0495945050505050565b6000818484111561182e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561178b578181015183820152602001611773565b50505090039056fe4f7261636c6541676772656761746f723a206f7574546f6b656e206973205a65726f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f7261636c6541676772656761746f723a20616d6f756e74496e206973205a65726f9e1b0d3a6188c3223b37ac7da3a60120d30bf27de95f233eff27b6beca24989d536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65720000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c34f7261636c6541676772656761746f723a20696e546f6b656e206973205a65726f4f7261636c6541676772656761746f723a2045524332302e646563696d616c73282920726576657274a2646970667358221220b2782ad571c6d8df344686cd0fdd89baefd1be559b8e8d8bed725d70deb9f95164736f6c634300060a0033",
  "devdoc": {
    "methods": {
      "getExpectedReturnAmount(uint256,address,address)": {
        "details": "expected return amount of outToken from amountIn of inToken"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/OracleAggregator.sol:OracleAggregator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1147,
        "contract": "contracts/OracleAggregator.sol:OracleAggregator",
        "label": "_tokenPairAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 1151,
        "contract": "contracts/OracleAggregator.sol:OracleAggregator",
        "label": "_nrOfDecimalsUSD",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}